name: Deploy Terraform Infrastructure

on:
  push:
    branches: [main]

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      GITHUB_USER: jordivilagut
      DOMAIN_NAME: farmify.app
      PROJECT_ID: a9191e2a
      PROJECT_NAME: planter
      AMI_ID: ami-01f3a9a49e4032afb
      DB_NAME: planterdb
      DB_USERNAME: planteradmin
      HOSTED_ZONE_ID: Z08038062H2ZA3PTTK6G3

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Retrieve or generate DB password from Secrets Manager
        id: dbpass
        run: |
          SECRET_NAME="planter/db_password"

          PASSWORD=$(aws secretsmanager get-secret-value \
            --secret-id "$SECRET_NAME" \
            --region "$AWS_DEFAULT_REGION" \
            --query SecretString --output text 2>/dev/null || true)

          if [ -z "$PASSWORD" ]; then
            PASSWORD=$(openssl rand -base64 32 | tr -dc 'A-Za-z0-9' | head -c 20)
            aws secretsmanager create-secret \
              --name "$SECRET_NAME" \
              --secret-string "$PASSWORD" \
              --region "$AWS_DEFAULT_REGION"
          fi

          echo "DB_PASSWORD=$PASSWORD" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=codefarm-terraform-states" \
            -backend-config="key=users/${GITHUB_USER}/${PROJECT_NAME}/terraform.tfstate" \
            -backend-config="region=${AWS_DEFAULT_REGION}" \
            -backend-config="encrypt=true"
        working-directory: infra

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan \
            -var="region=${AWS_DEFAULT_REGION}" \
            -var="project_id=${PROJECT_ID}" \
            -var="project_name=${PROJECT_NAME}" \
            -var="domain_name=${DOMAIN_NAME}" \
            -var="ami_id=${AMI_ID}" \
            -var="db_name=${DB_NAME}" \
            -var="db_user=${DB_USERNAME}" \
            -var="db_password=$DB_PASSWORD" \
            -var="hosted_zone_id=$HOSTED_ZONE_ID"
        env:
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          HOSTED_ZONE_ID: ${{ env.HOSTED_ZONE_ID }}
        working-directory: infra

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: infra

      - name: Extract Outputs
        id: tfoutput
        run: |
          echo "ec2_instance_id=$(terraform output -raw ec2_instance_id)" >> $GITHUB_OUTPUT
          echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT
          echo "app_s3_bucket=$(terraform output -raw app_s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "deployment_bucket=$(terraform output -raw deployment_s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(terraform output -raw cloudfront_distribution_url)" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "github_role_arn=$(terraform output -raw github_role_arn)" >> $GITHUB_OUTPUT
        working-directory: infra

      - name: Store deployment values in AWS Secrets Manager
        run: |
          put_secret() {
            local name=$1
            local value=$2

            if aws secretsmanager describe-secret --secret-id "$name" --region "$AWS_DEFAULT_REGION" > /dev/null 2>&1; then
              echo "Updating $name"
              aws secretsmanager update-secret \
                --secret-id "$name" \
                --secret-string "$value" \
                --region "$AWS_DEFAULT_REGION"
            else
              echo "Creating $name"
              aws secretsmanager create-secret \
                --name "$name" \
                --secret-string "$value" \
                --region "$AWS_DEFAULT_REGION"
            fi
          }

          put_secret planter/ec2_instance_id "${{ steps.tfoutput.outputs.ec2_instance_id }}"
          put_secret planter/ec2_public_ip "${{ steps.tfoutput.outputs.ec2_public_ip }}"
          put_secret planter/rds_endpoint "${{ steps.tfoutput.outputs.rds_endpoint }}"
          put_secret planter/deployment_bucket "${{ steps.tfoutput.outputs.deployment_bucket }}"
          put_secret planter/github_role_arn "${{ steps.tfoutput.outputs.github_role_arn }}"
